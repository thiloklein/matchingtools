# This is an **example** API to demontstrate features of OpenAPI specification.
# It doesn't cover all OpenAPI features. For more full example check out: https://github.com/APIs-guru/petstore_extended

swagger: '2.0'
# You should specify common part of your endpoints in the following format:
#   <schemes>://<host><basepath>
schemes:
  - https # Remove if your API donsn't support HTTPS
host: api.matchingtools.org # Replace with your hostname. 
basePath: / # Replace with your basePath. Note: SHOULD begin with '/'.
info:
  # Describe your API here, you can use GFM (https://guides.github.com/features/mastering-markdown) here
  description: |
    The **MatchingTools** API implements matching algorithms using the OpenAPI specification.
    # Introduction
    This specification is describing the API in 
    [OpenAPI/Swagger format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md).
    
    # OpenAPI Specification
    The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which
    allows both humans and computers to discover and understand the capabilities of the service without access to source
    code, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can 
    understand and interact with the remote service with a minimal amount of implementation logic. Similar to what
    interfaces have done for lower-level programming, OpenAPI removes the guesswork in calling the service.

  version: '1.0.0' # Your API version
  # It can be any string but it is better to use semantic versioning: http://semver.org/
  # Warning: OpenAPI require version to be string, but without quotation YAML can recognize it as number.

  title: MatchingTools API # Replace with your API title
  # Keep it simple. Don't add "API" or verison at the end of the string.

  #termsOfService: 'https://example.com/terms/' # [Optional] Replace with an URL to your ToS
  contact:
    email: 'info@matchingtools.com' # [Optional] Replace with your contact email
    #url: 'https://matchingtools.com' # [Optional] Replace with link to your contact form
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'https://matchingtools.com/logo.png'
produces:
  # List of mime types your API endpoins can return.
  - application/json
  #- application/xml
  #- text/csv
consumes:
  # List of mime types your API endpoins consumes.
  - application/json
  #- application/xml
  #- text/csv

# A list of tags used by the specification with additional metadata.
# The order of the tags can be used to reflect on their order by the parsing tools.
tags:
  - name: HRI
    description: Deferred Acceptance Algorithm for hospital/residents problems
  - name: IAA
    description: Immediate Acceptance Algorithm for hospital/residents problems (a.k.a. college admissions problems) with incomplete rank order lists.
  - name: TTC
    description: Top-Trading-Cycles Algorithm for trading indivisible items, e.g. in housing and land markets.
  - name: SRI
    description: Irving Algorithm for stable roomates problems.
  - name: CORS
    description: Options requests.

# Security scheme definitions that can be used across the specification.
securityDefinitions:
  basic_auth:  # security definition name (you can name it as you want)
    type: basic

# To apply Basic auth to the whole API:
security:
  - basic_auth: []

# Holds the relative paths to the individual endpoints. The path is appended to the
# basePath in order to construct the full URL. 
paths:
  '/':
    options:
      tags:
        - CORS
      summary: "CORS settings for root path"
      description: "Cross-Origin Resource Sharing (CORS) request for root path."
      responses:
        '200':
          $ref: "#/responses/Success"
  '/hri':
    options:
      tags:
        - CORS
      summary: "CORS settings for hri method"
      description: "Cross-Origin Resource Sharing (CORS) request for hri method."
      responses:
        '200':
          $ref: "#/responses/Success"
  '/hri/demo1':
    post:
      tags:
        - HRI
      summary: Deferred Acceptance Algorithm for hospital/residents problems 
      operationId: hri_demo1
      description: 'Deferred Acceptance Algorithm for hospital/residents problems (a.k.a. college admissions problems) with incomplete rank order lists. Finds the college- or student-optimal stable matchings in the hospital/residents problem (a.k.a. college admissions problem) or the related stable marriage problem. The implementation allows for incomplete preference lists (some agents find certain agents unacceptable) and unbalanced instances (unequal number of agents on both sides).'
      parameters:
        - in: "body"
          name: "instance"
          description: "SRI specification in JSON format."
          required: true
          schema:
            $ref: "#/definitions/hri_in"
        - in: query
          name: "optimum"
          type: "string"
          required: true
          description: "Type of matching to be returned. Defaults to student-optimal."
          enum:
          - "student-optimal"
          - "college-optimal"
          default: "student-optimal"
      responses:
        '401':
          $ref: "#/responses/UnauthorizedError"
        '405':
          description: "Invalid input"
        '200':
          description: 'OK'
          headers:
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
          examples:
            {"hri_matching": [
              {
                "college": "Public1",
                "student": "Kai"
              },
              {
                "college": "Public2",
                "student": "Lea"
              },
              {
                "college": "Private",
                "student": "Mia"
              }]
            }
          schema:
            $ref: "#/definitions/hri_out"
    options:
      tags:
        - CORS
      summary: "CORS settings for hri endpoint"
      description: "Cross-Origin Resource Sharing (CORS) request for hri endpoint."
      responses:
        '200':
          $ref: "#/responses/Success"
  '/hri/demo2':
    post:
      tags:
        - HRI
      summary: Deferred Acceptance Algorithm for hospital/residents problems 
      operationId: hri_demo2
      description: 'Deferred Acceptance Algorithm for hospital/residents problems (a.k.a. college admissions problems) with incomplete rank order lists. Finds the college- or student-optimal stable matchings in the hospital/residents problem (a.k.a. college admissions problem) or the related stable marriage problem. The implementation allows for incomplete preference lists (some agents find certain agents unacceptable) and unbalanced instances (unequal number of agents on both sides).'
      parameters:
        - in: "formData"
          name: "file"
          type: "file"
          description: "JSON file upload with HRI specification."
          required: true
        - in: query
          name: "optimum"
          type: "string"
          required: true
          description: "Type of matching to be returned. Defaults to student-optimal."
          enum:
          - "student-optimal"
          - "college-optimal"
          default: "student-optimal"
      responses:
        '401':
          $ref: "#/responses/UnauthorizedError"
        '405':
          description: "Invalid input"
        '200':
          description: 'OK'
          headers:
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
          examples:
            {"hri_matching": [
              {
                "college": "Public1",
                "student": "Kai"
              },
              {
                "college": "Public2",
                "student": "Lea"
              },
              {
                "college": "Private",
                "student": "Mia"
              }]
            }
          schema:
            $ref: "#/definitions/hri_out"
    options:
      tags:
        - CORS
      summary: "CORS settings for hri endpoint"
      description: "Cross-Origin Resource Sharing (CORS) request for hri endpoint."
      responses:
        '200':
          $ref: "#/responses/Success"

responses:
  UnauthorizedError:
    description: Authentication failed
    headers:
      WWW_Authenticate:
        type: string
  Success:
    description: 'OK'
    headers:
      Access-Control-Allow-Headers:
        type: "string"
      Access-Control-Allow-Methods:
        type: "string"
      Access-Control-Allow-Origin:
        type: "string"

definitions:
  hri_in:
    type: "object"
    required:
    - "student_prefs"
    - "college_prefs"
    - "college_capacity"
    properties:
      student_prefs:
        type: "array"
        items:
          type: "string"
          example: {
              "Lea": ["Public2"],
              "Mia": ["Private", "Public2", "Public1"],
              "Kai": ["Public1", "Public2", "Private"]
            }
          description: "..."
      college_prefs:
        type: "array"
        items:
          type: "string"
          example: {
              "Public1": ["Lea", "Kai", "Mia"],
              "Public2": ["Lea", "Kai", "Mia"],
              "Private": ["Kai", "Mia", "Lea"]
            }
      college_capacity:
        type: "array"
        items:
          type: "integer"
          example: {
              "Public1": 1,
              "Public2": 1,
              "Private": 1
          }
  hri_out:
    type: "object"
    properties:
      hri_matching:
        type: "array"
        items:
          type: "string"



